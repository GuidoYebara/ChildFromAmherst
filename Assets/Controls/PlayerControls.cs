//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controls/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Normal"",
            ""id"": ""53d9fe5d-c116-4539-9eb1-02eac91054eb"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""fea1922d-6552-4fcb-b45d-b43b53c7eac7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""e373a820-2f04-4da6-9abd-2d77eae84950"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RMB"",
                    ""type"": ""Button"",
                    ""id"": ""cd8a0183-18a4-4479-9af1-a27e69494433"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""cc0afe1d-fe70-46f8-85de-829da75b0a17"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""10b44c4a-171f-479d-86b7-100c50966631"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e0958d0c-6751-49bf-954d-d55d69be69bc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""192f8e9f-8d18-4c80-ba89-6ca143317b58"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7f9ea7c9-c58e-42d4-85d8-3a4d8980c45f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3963c711-a88a-456d-a774-a252ac481d8e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""48af00dd-9869-484a-8166-ebc37dc90fc8"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e681b192-4649-4057-888f-87ec942739fe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""034f15ff-d971-4c4e-a74a-8eb93ac23f63"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RMB"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""735bd969-87c2-4737-b8c7-33f46c3b7388"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6b0d791-dead-4907-8b93-1e295dced0a2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AnyState"",
            ""id"": ""c68f8608-6d86-4908-8c95-458c968f644c"",
            ""actions"": [
                {
                    ""name"": ""BringUpMenu"",
                    ""type"": ""Button"",
                    ""id"": ""6f84bd2b-a910-4ec1-8b23-40b024640ccd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe41bfcb-bbbf-4c6f-bf0f-57ac13485b51"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""BringUpMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Normal
        m_Normal = asset.FindActionMap("Normal", throwIfNotFound: true);
        m_Normal_Move = m_Normal.FindAction("Move", throwIfNotFound: true);
        m_Normal_Select = m_Normal.FindAction("Select", throwIfNotFound: true);
        m_Normal_RMB = m_Normal.FindAction("RMB", throwIfNotFound: true);
        m_Normal_Look = m_Normal.FindAction("Look", throwIfNotFound: true);
        m_Normal_Use = m_Normal.FindAction("Use", throwIfNotFound: true);
        // AnyState
        m_AnyState = asset.FindActionMap("AnyState", throwIfNotFound: true);
        m_AnyState_BringUpMenu = m_AnyState.FindAction("BringUpMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Normal
    private readonly InputActionMap m_Normal;
    private INormalActions m_NormalActionsCallbackInterface;
    private readonly InputAction m_Normal_Move;
    private readonly InputAction m_Normal_Select;
    private readonly InputAction m_Normal_RMB;
    private readonly InputAction m_Normal_Look;
    private readonly InputAction m_Normal_Use;
    public struct NormalActions
    {
        private @PlayerControls m_Wrapper;
        public NormalActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Normal_Move;
        public InputAction @Select => m_Wrapper.m_Normal_Select;
        public InputAction @RMB => m_Wrapper.m_Normal_RMB;
        public InputAction @Look => m_Wrapper.m_Normal_Look;
        public InputAction @Use => m_Wrapper.m_Normal_Use;
        public InputActionMap Get() { return m_Wrapper.m_Normal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalActions set) { return set.Get(); }
        public void SetCallbacks(INormalActions instance)
        {
            if (m_Wrapper.m_NormalActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnMove;
                @Select.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnSelect;
                @RMB.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnRMB;
                @RMB.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnRMB;
                @RMB.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnRMB;
                @Look.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnLook;
                @Use.started -= m_Wrapper.m_NormalActionsCallbackInterface.OnUse;
                @Use.performed -= m_Wrapper.m_NormalActionsCallbackInterface.OnUse;
                @Use.canceled -= m_Wrapper.m_NormalActionsCallbackInterface.OnUse;
            }
            m_Wrapper.m_NormalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @RMB.started += instance.OnRMB;
                @RMB.performed += instance.OnRMB;
                @RMB.canceled += instance.OnRMB;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
            }
        }
    }
    public NormalActions @Normal => new NormalActions(this);

    // AnyState
    private readonly InputActionMap m_AnyState;
    private IAnyStateActions m_AnyStateActionsCallbackInterface;
    private readonly InputAction m_AnyState_BringUpMenu;
    public struct AnyStateActions
    {
        private @PlayerControls m_Wrapper;
        public AnyStateActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @BringUpMenu => m_Wrapper.m_AnyState_BringUpMenu;
        public InputActionMap Get() { return m_Wrapper.m_AnyState; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AnyStateActions set) { return set.Get(); }
        public void SetCallbacks(IAnyStateActions instance)
        {
            if (m_Wrapper.m_AnyStateActionsCallbackInterface != null)
            {
                @BringUpMenu.started -= m_Wrapper.m_AnyStateActionsCallbackInterface.OnBringUpMenu;
                @BringUpMenu.performed -= m_Wrapper.m_AnyStateActionsCallbackInterface.OnBringUpMenu;
                @BringUpMenu.canceled -= m_Wrapper.m_AnyStateActionsCallbackInterface.OnBringUpMenu;
            }
            m_Wrapper.m_AnyStateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @BringUpMenu.started += instance.OnBringUpMenu;
                @BringUpMenu.performed += instance.OnBringUpMenu;
                @BringUpMenu.canceled += instance.OnBringUpMenu;
            }
        }
    }
    public AnyStateActions @AnyState => new AnyStateActions(this);
    public interface INormalActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnRMB(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
    }
    public interface IAnyStateActions
    {
        void OnBringUpMenu(InputAction.CallbackContext context);
    }
}
